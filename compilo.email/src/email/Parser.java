
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 26 13:17:40 CET 2015
//----------------------------------------------------

package email;

import email.EmailServer;
import email.SymbolTable;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 26 13:17:40 CET 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\014\000\002\002\003\000\002\002\004\000\002\003" +
    "\002\000\002\003\004\000\002\004\004\000\002\005\002" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\003\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\021\000\020\002\uffff\004\uffff\005\uffff\006\uffff\007" +
    "\uffff\010\uffff\011\uffff\001\002\000\004\002\023\001\002" +
    "\000\020\002\001\004\ufffc\005\010\006\012\007\013\010" +
    "\007\011\014\001\002\000\020\002\ufffe\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\010\ufffe\011\ufffe\001\002\000\004\012" +
    "\016\001\002\000\004\012\016\001\002\000\004\004\020" +
    "\001\002\000\004\012\016\001\002\000\004\012\016\001" +
    "\002\000\004\004\ufff7\001\002\000\004\004\ufff9\001\002" +
    "\000\004\004\ufff6\001\002\000\004\004\ufffa\001\002\000" +
    "\020\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd" +
    "\011\ufffd\001\002\000\004\004\ufffb\001\002\000\004\004" +
    "\ufff8\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\021\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\006\004\005\005\010\001\001\000\002\001\001" +
    "\000\004\006\021\001\001\000\004\006\020\001\001\000" +
    "\002\001\001\000\004\006\016\001\001\000\004\006\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP_actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP_actions();
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP_do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
		m.append (info.toString());
        m.append(" : "+message);
        System.err.println(m.toString());
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    private EmailServer eServer;
    private SymbolTable table = null;

    public SymbolTable getTable () {
		if (table == null) table = new SymbolTable ();
		return table;
    }

    public EmailServer getServer () {
		return eServer;
    }

    public void setServer (EmailServer eServer) {
		this.eServer = eServer;
    }



/** Cup generated class to encapsulate user supplied action code.*/
class CUP_actions {

  /** Constructor */

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP_do_action(
    int                        CUP_act_num,
    java_cup.runtime.lr_parser CUP_parser,
    java.util.Stack            CUP_stack,
    int                        CUP_top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP_result;

      /* select the action based on the action number */
      switch (CUP_act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // address ::= EMAIL 
            {
              String RESULT =null;
		String e = (String)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 RESULT = e; 
              CUP_result = getSymbolFactory().newSymbol("address",4, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Instruction ::= INBOX 
            {
              Object RESULT =null;
		 getServer().showInbox(); 
              CUP_result = getSymbolFactory().newSymbol("Instruction",3, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Instruction ::= REMOVEFROMSPAM address 
            {
              Object RESULT =null;
		String a = (String)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 getServer().removeFromBlockedkList(a); 
              CUP_result = getSymbolFactory().newSymbol("Instruction",3, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Instruction ::= ADDTOSPAM address 
            {
              Object RESULT =null;
		String a = (String)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 getServer().addToBlockedkList(a); 
              CUP_result = getSymbolFactory().newSymbol("Instruction",3, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Instruction ::= RECIEVE address 
            {
              Object RESULT =null;
		String a = (String)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 getServer().recieve(a); 
              CUP_result = getSymbolFactory().newSymbol("Instruction",3, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Instruction ::= SEND address 
            {
              Object RESULT =null;
		String a = (String)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 getServer().send(a); 
              CUP_result = getSymbolFactory().newSymbol("Instruction",3, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Instruction ::= 
            {
              Object RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("Instruction",3, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Definition ::= Instruction TERM 
            {
              Object RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("Definition",2, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Definitions ::= Definitions Definition 
            {
              Object RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("Definitions",1, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Definitions ::= 
            {
              Object RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("Definitions",1, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Commandes EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		RESULT = start_val;
              CUP_result = getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP_parser.done_parsing();
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Commandes ::= Definitions 
            {
              Object RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("Commandes",0, RESULT);
            }
          return CUP_result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

}
